openapi: 3.0.3
info:
  title: Payment Service API
  description: |-
    A robust, enterprise-grade API for processing and managing payment transactions.
    This API supports idempotent payment creation, detailed payment tracking, and search.
  version: 1.0.0
  contact:
    name: Platform Engineering Team
    email: platform-engineering@company.com

servers:
  - url: http://localhost:8080
    description: Local development server
  - url: https://api.payments.company.com
    description: Production server

components:
  schemas:
    ProblemDetail:
      type: object
      properties:
        type:
          type: string
          format: uri
          description: A URI reference that identifies the problem type.
          example: "https://api.company.com/errors/invalid-parameter"
        title:
          type: string
          description: A short, human-readable summary of the problem type.
          example: "Invalid Parameter"
        status:
          type: integer
          format: int32
          description: The HTTP status code generated by the origin server.
          example: 400
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
          example: "The 'amount' parameter must be greater than 0."
        instance:
          type: string
          format: uri
          description: A URI reference that identifies the specific occurrence of the problem.
          example: "/v1/payments"
      required:
        - status
        - title
    Payment:
      type: object
      required:
        - id
        - amount
        - currency
        - status
        - payerId
        - payeeId
        - createdAt
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the payment.
          example: "123e4567-e89b-12d3-a456-426614174000"
        amount:
          type: number
          format: double
          minimum: 0.01
          exclusiveMinimum: false
          description: The positive amount of the payment.
          example: 123.45
        currency:
          type: string
          pattern: '^[A-Z]{3}$'
          description: The ISO 4217 currency code.
          example: USD
        status:
          type: string
          enum: [PENDING, PROCESSING, COMPLETED, FAILED, CANCELLED]
          description: The current state of the payment lifecycle.
        payerId:
          type: string
          description: Identifier for the entity making the payment.
          example: "customer-789"
        payeeId:
          type: string
          description: Identifier for the entity receiving the payment.
          example: "merchant-456"
        description:
          type: string
          description: A human-readable description of the payment.
          example: "Invoice #12345 Payment"
        createdAt:
          type: string
          format: date-time
          description: The UTC timestamp when the payment was created.
        updatedAt:
          type: string
          format: date-time
          description: The UTC timestamp when the payment was last updated
  parameters:
    IdempotencyKeyHeader:
      name: Idempotency-Key
      in: header
      required: true
      description: |
        A unique key supplied by the client to ensure idempotent operation.
        Must be a valid UUID. The server will cache the response of the first request with this key for a period of time.
      schema:
        type: string
        format: uuid
      example: "123e4567-e89b-12d3-a456-426614174000"
paths:
  /v1/payments:
    post:
      tags:
        - Payments
      summary: Create a new payment
      description: |
        Processes a new payment transaction.
        This operation is idempotent. Provide a unique `Idempotency-Key` header to prevent duplicate payments.
      operationId: createPayment
      parameters:
        - $ref: '#/components/parameters/IdempotencyKeyHeader' # We will define this next
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
                - currency
                - payerId
                - payeeId
              properties:
                amount:
                  $ref: '#/components/schemas/Payment/properties/amount'
                currency:
                  $ref: '#/components/schemas/Payment/properties/currency'
                payerId:
                  $ref: '#/components/schemas/Payment/properties/payerId'
                payeeId:
                  $ref: '#/components/schemas/Payment/properties/payeeId'
                description:
                  $ref: '#/components/schemas/Payment/properties/description'
      responses:
        '201':
          description: Payment created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: URL of the created payment.
        '400':
          description: Bad Request. Validation failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '404':
          description: Payment not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '409':
          description: Conflict. Duplicate idempotency key.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'
        '500':
          description: Internal Server Error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetail'